# 因为我们Runner执行器设置为docker, 所以这里需要指定docker的版本
image: docker:stable
# 定义三个阶段
stages:
  - compile
  - build
  - deploy
# 定义个变量, 指定maven下载的jar包存放的位置
variables:
  PROJECT-NAME: "odf-editor-sys-server"
  FRONT-SERVICE: "editor-service/front-service"
  IMAGE-FRONT: "odf-editor-sys-front-service"
# 第一阶段
compile:
  # 打包用到了maven, 所有需要拉取maven镜像, 这是我自己构建的阿里云maven私服的maven镜像
  image: docker.io/gradle
  # 指定阶段
  stage: compile
  # 运行脚本, 使用变量时要用到 $ 符号
  script:
    - export GRADLE_USER_HOME=/usr/local/repos/gradle
    - gradle clean build
  # 只作用在master分支
  only:
    - master
  # 创建runner时指定的tag
  tags:
    - my-tag
  # 编译后有产物,所以要指定下过期时间和路径, 以供于其他阶段使用
  artifacts:
    expire_in: 10 min
    paths:
      - $FRONT-SERVICE/build/libs/*.jar
#第二阶段，开始生成docker镜像
build:
  image: docker:stable
  stage: build
  only:
    - master
  tags:
    - my-tag
  script:
    - docker build -t $PROJECT-NAME:front-service-1.0 -f $FRONT-SERVICE/Dockerfile .

#第三阶段,发布
deploy:
  image: docker:stable
  stage: deploy
  only:
    - master
  tags:
    - my-tag
  script:
    - docker stop $IMAGE-FRONT ||true
    - docker rm $IMAGE-FRONT || true
    - docker run -d -p 8081:8081 -p 5005:5005 --name $IMAGE-FRONT -v /usr/local/projects/odf-editor-sys/backend/db:/usr/local/projects/odf-editor-sys/backend/db $PROJECT-NAME:front-service-1.0